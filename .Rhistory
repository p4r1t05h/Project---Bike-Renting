u<-c(1,2,3, "abcd")
u
mode(u)
#Colon Operator
xx<-1:30
xx
xx[10]
xx[10:15]
xx[c(5,10,15,20)]
xx[-30]
xx[-(20:30)]
xx[-c(5,15,25,20)]
#Sequence
seq(from=5, to=10)
seq(5,10)
seq(0,10, by=2)
seq(0,10, length.out = 10)
#Repeat
rep(0, times=10)
rep(0,10)
rep(1:5, times=2)
rep(1:5, each=2)
rep(1:5, times=2, each=2)
l1<-x>3
li
l1
x+l1
v2<-1:4
v2
paste("Quarter", c(1,2,3,4), sep="-")
paste("Quarter", v2, sep="-")
paste("quarter", 1:5, sep="-")
#Character Vector
c1<-("Quarter")
c1
Quarters<-paste("Quarter", 1:4, sep="-")
Quarters
mode(Quarters)
cat("Quarter", 1:4, sep = "-")
paste(5, c(1,2,3,4), sep="-")
length(Quarters)
substr(Quarters, start = 9, stop = 9)
strsplit(Quarters, split = "-")
strsplit(Quarters, split = "r")
nchar(Quarters)
toupper(Quarters)
tolower(Quarters)
paste(Quarters, Quarters, sep = ", ")
cat(Quarters, Quarters, sep = ", ")
m2<-c("do", "do not", "not")
m2
grep("do", m2)
m2<-c("do", "do not", "not", "does")
m2
grep("do", m2)
m2<-c(m2, "1")
m2
grep("[a-z]", m2)
m2<-c("do", "do not", "not")
m2
grep("do", m2)
m2<-c(m2, "1")
m2
grep("[a-z]", m2)
m2<-c(m2, "1", "does")
m2
grep("[a-z]", m2)
m2<-c("do", "do not", "not")
m2
m2<-c(m2, "1")
m2
grep("[a-z]", m2)
gsub("do", "did", m2)
m2<-c(m2, "not do")
m2
regexpr("do", m2)
f<-c(5,6,7)
s<-c(4,7,6)
ifelse(f>s,f,s)
v
v1<-v[!is.na(v)]
v1
#Matrix
M1<-matrix(data=1, nrow=3, ncol = 3)
M1
dim(M1)
M2<-matrix(NA, nrow = 2, ncol = 2)
M2
dim(M2)
M3<-matrix(c(4,5,6,7), nrow = 2, ncol=2)
M3
M3<-matrix(c(4,5,6,7), nrow = 2, ncol=3)
M3
M3<-matrix(c(4,5,6,7), nrow = 2, ncol=2)
M3
V1<-1:12
V1
M4<-matrix(V1, nrow = 5)
M4
M5<-matrix(V1, nrow = 4, byrow = TRUE)
M5
V2<-1:5
V3<-V2^2
M6<-cbind(V2,V3)
M6
M6<-cbind(M6, V3*2)
M6
M7<-rbind(V2,V3)
M7
colnames(M6)<-C("Vector1", "vector2", "vector3")
colnames(M6)<-c("Vector1", "vector2", "vector3")
M6
rownames(M6)<-c("row1", "row2", "row3", "row4")
rownames(M6)<-c("row1", "row2", "row3", "row4", "row5")
M6
dim(M7)
V2<-c(V2, 6)
V2<-c(V2, 6)
M8<-rbind(V1,V2)
M8
M9<-diag(4)
M9
M10<-diag(V2)
M10
diag(M10)
#Indexing Matrix
M4
M4[4,2]
M4[,2]
M4[3,]
M4[,1:2]
M4[c(2,4),]
M4
M4>4
M4[,2]>6
M4[M4[,1]>4,]
M4[M4[,2]>6,]
M4[M4[,1]>4,]
M4[TRUE,1]
M4[c(FALSE, TRUE, T, F, F),2]
rm(list = ls())
# EDA & Visualization
getwd()
library(ISLR)
library(data.table)
data(Hitters)
str(Hitters)
head(Hitters)
names(Hitters)
?Hitters
Hitters1=data.frame(Hitters)
mean(Hitters1$mean)
#Remove rows with NA
table(is.na(Hitters1$Salary))
Hitters1=na.omit(Hitters1)
table(is.na(Hitters1$Salary))
str(Hitters1)
#ADD more categprical Variable Salary1 with value (L M H)
Salary1<-cut(Hitters1$Salary, breaks = 3, labels = c("L", "M", "H"))
Hitters1<-cbind(Hitters1, Salary1)
head(Hitters1)
table(Salary1)
n<-length(Hitters1$Salary1)
#======================================
#Univariate Analysis
#=====Qualitative (Categorical) Data - Numerical Analysis=============
#Count
table(Hitters1$Salary1)
#Proportion
prop.table(table(Hitters1$Salary1))
#Percentage
prop.table(table(Hitters1$Salary1))*100
bars<-as.matrix(table(Hitters1$Salary1))
bars
colnames(bars)<-"Salary"
rownames(bars)<-c("Low", "Medium", "High")
names(bars)<-c("Low", "Medium", "Hign")
pie(bars, col = c(3,4,5), main = "Salary Grade")
bars
par(mfrow=c(1,1))
barplot(bars)
?par
barplot(bars, beside = T)
barplot(bars, beside = T, space = 0.5, names.arg = c("LowSal","MediumSal","HighSal"))
barplot(bars, beside = T, space = 0.5, col=c(3,4,5),names.arg = c("LowSal","MediumSal","HighSal"))
barplot(bars, beside = T, space = 0.5, col=c(7,8,9),names.arg = c("LowSal","MediumSal","HighSal"))
par(mfrow=c(1,2))
par(mfrow=c(1,2))
pie(bars, col = c(3,4,5), main = "Salary Grade")
barplot(bars, beside = T, space = 0.5, col=c(7,8,9),names.arg = c("LowSal","MediumSal","HighSal"))
par(mfrow=c(1,2))
barplot(bars, beside = T, space = 0.5, col=c(7,8,9),names.arg = c("LowSal","MediumSal","HighSal"), main = "Salary Grade")
par(mfrow=c(1,2))
par(mfrow=c(1,1))
barplot(bars, beside = T, space = 0.5, col=c(7,8,9),names.arg = c("LowSal","MediumSal","HighSal"), main = "Salary Grade")
par(mfrow=c(1,2))
barplot(bars, beside = T, space = 0.5, col=c(7,8,9),names.arg = c("LowSal","MediumSal","HighSal"), main = "Salary Grade")
barplot(bars, beside = T, space = 0.5, col=c(7,8,9),names.arg = c("LowSal","MediumSal","HighSal"), main = "Salary Grade")
par(mfrow=c(1,1))
barplot(bars, beside = T, space = 0.5, col=c(7,8,9),names.arg = c("LowSal","MediumSal","HighSal"), main = "Salary Grade")
p=prop.test(x=64, n=400, p=0.2, alternative = "less", conf.level = 0.95)
sqrt(p$statistic)
p$p.value
p
View(p)
min(Hitters1$Salary)
max(Hitters1$Salary)
mean(Hitters1$Salary)
median(Hitters1$Salary)
range(Hitters1$Salary)
sd(Hitters1$Salary)
salary.5p<-fivenum(Hitters1$Salary)
salary.5p
Salaru.sum<-summary(Hitters1$Salary)
Salary.sum<-summary(Hitters1$Salary)
salary.sum<-summary(Hitters1$Salary)
salary.sum
names(salary.sum)
IQR<-salary.5p[4]-salary.5p[2]
IQR
rm(Salaru.sum)
rm(Salary.sum)
hist(Hitters1$Salary)
hist(Hitters1$Salary, breaks = 5)
hist(Hitters1$Salary, breaks = 100)
hist(Hitters1$Salary, breaks = c(400,800,1200,1600,2000,2400,2800), main = "Histogram for Salary",
ylab = "Frequency", xlab = "Salary")
hist(Hitters1$Salary, breaks = c(400,800,1200,1600,2000,2400,2800), main = "Histogram for Salary",
ylab = "Frequency", xlab = "Salary")
hist(Hitters1$Salary, breaks = c(0,400,800,1200,1600,2000,2400,2800), main = "Histogram for Salary",
ylab = "Frequency", xlab = "Salary")
?hist
plot(density(Hitters1$Salary))
density(Hitters1$Salary)
plot(salary.sum)
plot(table(salary.sum))
plot(density(Hitters1$Salary))
boxplot(Hitters1$Salary)
boxplot(Hitters1$Salary, ylab="Salary", xlab="Employees")
boxplot(Hitters1$Salary, ylab="Salary", xlab="Employees", col = c(3,4,5))
boxplot(Hitters1$Salary, ylab="Salary", xlab="Employees")
boxplot(Hitters1$Salary, horizontal = T)
salary.stats<-boxplot.stats(Hitters1$Salary)$stats
salary.stats
boxplot(salary.stats)
boxplot(salary.5p)
#=====Shapiro Wilk Normality Test (Normal if p>0.05)
shapiro.test(Hitters1$Salary)
t.test(Hitters1$Salary, alternative = "Greater", mu=425)
t.test(Hitters1$Salary, alternative = "greater", mu=425)
a<-boxplot(Hitters1$Salary~Hitters1$League)
a$stats
tapply(Hitters1$Salary, Hitters1$League, summary)
t.test(Hitters1$Salary~Hitters1$League, alternative="t")
wt.before<-c(65.5,78.3,84.6,67.8,72.9,79.8,56.4,88.3,101.6,88.0,77.4,82.5,93.3)
wt.after<-c(67.1,73.6,82.9,71.0,73.1,73.2,59.9,81.8,91.4,82.5,76.1,81.4,88.8)
par(mfrow=c(1,2))
hist(wt.before,4)
hist(wt.after,4)
t.test(wt.after, wt.before, alternative = "l", paired = T)
# b) Using Formula
wt<-c(wt.after,wt.before)
period<-c(rep("After",13), rep("Before",13))
cbind(period, wt)
boxplot(wt~period)
t.test(wt~period, alternative="l", paired=T)
library(datasets)
data("mtcars")
cars
cars<-mtcars
str(cars)
head(cars)
#convert no of cylinder to factor (Categorical)
cars$cyl<-as.factor(cars$cyl)
str(cars)
table(cars$cyl)
boxplot(cars$mpg~cars$cyl)
par(mfrow=c(1,1))
boxplot(cars$mpg~cars$cyl)
cars.aov<-aov(mpg~cyl, data=cars)
summary(cars.aov)
Salary.Table<-table(Hitters1$League,Hitters1$Salary1)
Salary.Table
prop.table(Salary.Table,1)*100
sal.chi<-chisq.test(Salary.Table)
sal.chi
sal.chi$statistic
sal.chi$expected
sal.chi$residuals
hist(cars$mpg)
hist(cars$wt)
##Scatter Plot (Q->Q)
plot(cars$mpg~cars$wt)
##Corelation Coefficient
cor(cars$mpg,cars$wt)
summary(carslm1)
#Linear Regression Line
#T test for Slope
carslm1<-lm(mpg~wt, data = cars) #fitting linear regression model
summary(carslm1)
abline(carslm1)
#Stratified Scatter plot
plot(cars$mpg, cars$wt, col(cars$cyl), pch=19)))
#Stratified Scatter plot
plot(cars$mpg, cars$wt, col(cars$cyl), pch=19)
#Stratified Scatter plot
plot(cars$mpg, cars$wt, col=(cars$cyl), pch=19)
#Matrix plot
pairs(cars[,c(1,2,3,4,5,6)])
rm(list=ls())
setwd("D:/Data Science/Project - Bike Renting")
getwd()
#loading Data set
bike<-read.csv("day.csv", header = T)
head(bike)
str(bike)
bike1<-bike
bike1$season<-as.factor(bike$season)
bike1$yr<-as.factor(bike$yr)
bike1$mnth<-as.factor(bike$mnth)
bike1$holiday<-as.factor(bike$holiday)
bike1$weekday<-as.factor(bike$weekday)
bike1$workingday<-as.factor(bike$workingday)
bike1$weathersit<-as.factor(bike$weathersit)
str(bike1)
#Feature Selection
library(Boruta)
impVar<-Boruta(cnt~., data = bike1)
print(impVar)
#cross checking with bivariate analysis
#Dependency test Q->Q
#cnt->instant
qq1<-cor(bike1$instant, bike1$cnt)
qq1
#Visualization
plot(bike1$instant, bike1$cnt)
#Test
qq1.test<-lm(cnt~instant, data = bike1)
summary(qq1.test)
abline(qq1.test)
#DEPENDENT
#cnt->temp
qq2<-cor(bike1$temp, bike1$cnt)
qq2
#Visualization
plot(bike1$temp, bike1$cnt)
#Test
qq2.test<-lm(cnt~temp, data = bike1)
summary(qq2.test)
abline(qq2.test)
#DEPENDENT
#cnt->atemp
qq3<-cor(bike1$atemp, bike1$cnt)
qq3
#Visualization
plot(bike1$atemp, bike1$cnt)
#Test
qq3.test<-lm(cnt~atemp, data = bike1)
summary(qq3.test)
abline(qq3.test)
#DEPENDENT
#cnt->hum
qq4<-cor(bike1$hum, bike1$cnt)
qq4
#Visualization
plot(bike1$hum, bike1$cnt)
#Test
qq4.test<-lm(cnt~hum, data = bike1)
summary(qq4.test)
abline(qq4.test)
#DEPENDENT
#cnt->windspeed
qq5<-cor(bike1$windspeed, bike1$cnt)
qq5
#Visualization
plot(bike1$windspeed, bike1$cnt)
#Test
qq5.test<-lm(cnt~windspeed, data = bike1)
summary(qq5.test)
abline(qq5.test)
#DEPENDENT
#cnt->casual
qq6<-cor(bike1$casual, bike1$cnt)
qq6
#Visualization
plot(bike1$casual, bike1$cnt)
#Test
qq6.test<-lm(cnt~casual, data = bike1)
summary(qq6.test)
abline(qq6.test)
#DEPENDENT
#cnt->registered
qq7<-cor(bike1$registered, bike1$cnt)
qq7
#Visualization
plot(bike1$registered, bike1$cnt)
#Test
qq7.test<-lm(cnt~registered, data = bike1)
summary(qq7.test)
abline(qq7.test)
#DEPENDENT
#C->Q Analysis
str(bike1)
#Numerical Analysis season->cnt
cq1<-boxplot(bike1$cnt~bike1$season)
cq1$stats
#Dependency test
cq1.test<-aov(bike1$cnt~bike1$season)
summary(cq1.test)
#DEPENDENT
str(bike1)
#Numerical analysis
cq2<-boxplot(bike1$cnt~bike1$yr)
cq2$stats
#dependency test
cq2.test<-t.test(bike1$cnt~bike1$yr, alternative = "t")
cq2.test
#DEPENDENT
#Numerical Analysis
cq3<-boxplot(bike1$cnt~bike1$mnth)
cq3$stats
#Dependency Test
cq3.test<-aov(bike1$cnt~bike1$mnth)
summary(cq3.test)
#DEPENDENT
#Numerical Analysis
cq4<-boxplot(bike1$cnt~bike1$holiday)
cq4$stats
#Dependency Test
cq4.test<-t.test(bike1$cnt~bike1$holiday, alternative = "t")
cq4.test
#INDEPENDENT
#Numerial Analysis cnt~weekday
str(bike1)
cq5<-boxplot(bike1$cnt~bike1$weekday)
#Dependency Test
cq5.test<-aov(bike$cnt~bike1$weekday)
summary(cq5.test)
#INDEPENDENT
#Numerical Analysis cnt~workingday
cq6<-boxplot(bike1$cnt~bike1$workingday)
#Dependency Test
cq6.test<-t.test(bike1$cnt~bike1$workingday, alternative="t")
cq6.test
#INDEPENDENT
#Numerical Analysis cnt~weathersit
cq7<-boxplot(bike1$cnt~bike1$weathersit)
#Dependency Test
cq7.test<-aov(bike1$cnt~bike1$weathersit)
summary(cq7.test)
#DEPENDENT
#Removing Unimportant Xs
bike1<-bike1[,c(-2,-6,-7,-8)]
str(bike1)
#Model Building
set.seed(123)
ind<- sample(1:nrow(bike1), 500)
train<-bike1[ind,]
test<-bike1[-ind,]
library(glmnet)
library(tree)
cv.out<-cv.glmnet(train, alpha=0)
x.train<-train[,-12]
y.train<-train[,12]
x.test<-test[,-12]
y.test<-test[,12]
cv.out<-cv.glmnet(x.train, y.train, alpha=0)
cv.out<-cv.glmnet(x.train, y.train, alpha=0)
cv.out.lasso<-cv.glmnet(x.train, y.train, alpha = 1)
library(ISLR)
library(boot)
knn.model<-knn(x.train,x.test,y.train, k=10)
library(class)
knn.model<-knn(x.train,x.test,y.train, k=10)
knn.model<-as.numeric(knn.model)
knn.model
rss.knn<-sum((y.test-knn.model)^2)
rss.knn
knn.model<-knn(x.train,x.test,y.train, k=5)
knn.model<-as.numeric(knn.model)
rss.knn<-sum((y.test-knn.model)^2)
rss.knn
knn.model<-knn(x.train,x.test,y.train, k=7)
knn.model<-as.numeric(knn.model)
rss.knn<-sum((y.test-knn.model)^2)
rss.knn
knn.model<-knn(x.train,x.test,y.train, k=9)
knn.model<-as.numeric(knn.model)
rss.knn<-sum((y.test-knn.model)^2)
rss.knn
knn.model<-knn(x.train,x.test,y.train, k=15)
knn.model<-as.numeric(knn.model)
rss.knn<-sum((y.test-knn.model)^2)
rss.knn
library(C50)
tree.model<-C5.0(y.train~x.train, trials=100, rules=T)
tree.model<-C5.0(cnt~.,data = train, trials=100, rules=T)
tree.model<-tree(y.train~x.train)
tree.model<-tree(cnt~., data = train)
plot(tree.model)
summary(tree.model)
tree.model
library(randomForest)
forest.model<-randomForest(cnt~., data = train, ntree=500)
forest.model
predict.forest.model<-predict(forest.model, newdata = test[,-12])
predict.forest.model
table(predict.forest.model, y.test)
varImpPlot(predict.forest.model)
varImpPlot(forest.model)
library(caret)
confusion<-confusionMatrix(table(predict.forest.model, y.test))
